// Shared Prisma schema for both Bot and API
// This is the single source of truth for the database schema

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

model GuildConfig {
  id                     String          @id @default(auto()) @map("_id") @db.ObjectId
  guildId                String          @unique
  maxMessagesCleared     Int             @default(100)
  musicChannelId         String          @default("")
  defaultRepeatMode      Int             @default(0)
  reactionRoleChannels   String[]        @default([])
  logReactionRoles       Boolean         @default(false)
  welcomeChannelId       String?
  goodbyeChannelId       String?
  welcomeEnabled         Boolean         @default(true)
  goodbyeEnabled         Boolean         @default(true)
  preferredLanguage      String          @default("en")
  // Ticket system fields
  ticketChannelId        String?
  ticketCategoryId       String?
  useTicketThreads       Boolean         @default(true)
  ticketOnCallRoleId     String?
  ticketSilentClaim      Boolean         @default(true)
  // Ticket access control
  ticketAccessType       String?
  ticketAccessRoleId     String?
  ticketAccessPermission String?
  ticketLogChannelId     String?
  // Relations - new LogSettings model handles all logging configuration
  logSettings            LogSettings?    @relation(fields: [logSettingsId], references: [id])
  appealSettings         AppealSettings? @relation(fields: [appealSettingsId], references: [id])
  logSettingsId          String?         @db.ObjectId
  appealSettingsId       String?         @db.ObjectId
  // New fields
  moderatorRoleIds       String[]        @default([])
  welcomeStats           Json?
  /// Send DMs to users when a moderation action is taken by default
  notify_user            Boolean         @default(false)
  /// Per-action moderation case behaviour. Keys are action names, values are "NEW" or "UPDATE".
  moderation_case_rules  Json?
  /// Channel where user reports should be sent
  reportChannelId        String?
  /// Role to ping when a new user report is submitted
  reportPingRoleId       String?
}

model LogSettings {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  guildId         String        @unique
  channelRouting  Json
  ignoredUsers    String[]      @default([])
  ignoredRoles    String[]      @default([])
  ignoredChannels String[]      @default([])
  enabledLogTypes String[]      @default([])
  customFormats   Json?
  filterRules     Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  GuildConfig     GuildConfig[]
}

model AppealSettings {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  guildId               String        @unique
  discordBotEnabled     Boolean       @default(true)
  webFormEnabled        Boolean       @default(false)
  emailEnabled          Boolean       @default(false)
  separateServerEnabled Boolean       @default(false)
  appealChannelId       String?
  appealServerId        String?
  webFormUrl            String?
  appealEmail           String?
  appealReceived        String?
  appealApproved        String?
  appealDenied          String?
  appealCooldown        Int           @default(86400)
  maxAppealsPerUser     Int           @default(3)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  GuildConfig           GuildConfig[]
}

model ModerationCase {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  caseNumber   Int
  guildId      String
  userId       String
  moderatorId  String
  type         String
  reason       String?
  evidence     String[]
  duration     Int?
  expiresAt    DateTime?
  isActive     Boolean         @default(true)
  severity     String          @default("LOW")
  points       Int             @default(0)
  canAppeal    Boolean         @default(true)
  appealedAt   DateTime?
  appealStatus String?
  context      Json?
  dmSent       Boolean         @default(false)
  publicNote   String?
  staffNote    String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  notes        CaseNote[]
  appeals      CaseAppeal[]
  logs         ModerationLog[]

  @@unique([guildId, caseNumber])
  @@index([guildId, userId])
  @@index([guildId, type])
  @@index([expiresAt])
}

model CaseNote {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  caseId     String         @db.ObjectId
  case       ModerationCase @relation(fields: [caseId], references: [id], onDelete: Cascade)
  authorId   String
  content    String
  isInternal Boolean        @default(false)
  createdAt  DateTime       @default(now())

  @@index([caseId])
}

model CaseAppeal {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  caseId         String         @db.ObjectId
  case           ModerationCase @relation(fields: [caseId], references: [id], onDelete: Cascade)
  userId         String
  appealMethod   String
  reason         String
  status         String         @default("PENDING")
  reviewedBy     String?
  reviewedAt     DateTime?
  reviewNotes    String?
  evidence       String[]
  communications Json[]         @default([])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([caseId])
  @@index([userId, status])
}

model ModerationLog {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  guildId        String
  logType        String
  userId         String?
  channelId      String?
  roleId         String?
  caseId         String?         @db.ObjectId
  case           ModerationCase? @relation(fields: [caseId], references: [id])
  before         Json?
  after          Json?
  metadata       Json?
  content        String?
  attachments    String[]
  embeds         Json[]
  executorId     String?
  reason         String?
  sentToChannels String[]        @default([])
  timestamp      DateTime        @default(now())

  @@index([guildId, logType])
  @@index([guildId, timestamp])
  @@index([userId])
  @@index([channelId])
}

model Ticket {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  ticketNumber   Int
  guildId        String
  userId         String
  channelId      String
  threadId       String?
  category       String
  title          String
  description    String?
  status         String          @default("OPEN")
  assignedTo     String?
  tags           String[]        @default([])
  closedReason   String?
  closedBy       String?
  closedAt       DateTime?
  lastActivity   DateTime        @default(now())
  allowUserClose Boolean         @default(true)
  isAnonymous    Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  messages       TicketMessage[]

  @@unique([guildId, ticketNumber])
  @@index([guildId, status])
  @@index([assignedTo])
}

model TicketMessage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ticketId    String   @db.ObjectId
  ticket      Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  messageId   String
  userId      String
  content     String
  attachments String[]
  embeds      Json[]
  isSystemMsg Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([ticketId])
  @@index([messageId])
}

model Alias {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  guildId         String
  name            String
  content         String
  category        String   @default("GENERAL")
  variables       String[] @default([])
  permissions     String[] @default([])
  usageCount      Int      @default(0)
  isGlobal        Boolean  @default(false)
  allowedChannels String[] @default([])
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([guildId, name])
  @@index([guildId, category])
}

model AutoModRule {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  guildId        String
  name           String
  type           String
  enabled        Boolean   @default(true)
  triggers       Json
  whitelist      String[]  @default([])
  sensitivity    String    @default("MEDIUM")
  actions        Json
  escalation     Json?
  exemptRoles    String[]  @default([])
  exemptChannels String[]  @default([])
  exemptUsers    String[]  @default([])
  targetChannels String[]  @default([])
  logChannel     String?
  logActions     Boolean   @default(true)
  triggerCount   Int       @default(0)
  lastTriggered  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String

  @@unique([guildId, name])
  @@index([guildId, enabled])
}

model ScheduledAction {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  guildId      String
  userId       String
  type         String
  caseId       String?   @db.ObjectId
  data         Json? // Additional data needed for action
  scheduledFor DateTime
  isExecuted   Boolean   @default(false)
  executedAt   DateTime?
  error        String? // Error message if execution failed
  retryCount   Int       @default(0)
  maxRetries   Int       @default(3)
  createdAt    DateTime  @default(now())

  @@index([scheduledFor, isExecuted])
  @@index([guildId, userId])
}

// User infraction points system
model UserInfractions {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  guildId      String
  userId       String
  totalPoints  Int       @default(0)
  strikes      Int       @default(0) // Number of major infractions
  lastIncident DateTime?

  // Point decay system
  pointDecay Json? // Configuration for automatic point reduction

  // Temporary restrictions
  restrictions Json[] @default([]) // Temporary channel/role restrictions

  updatedAt DateTime @updatedAt

  @@unique([guildId, userId])
  @@index([guildId, totalPoints])
}

// Comprehensive log type definitions
model LogType {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String  @unique // MESSAGE_DELETE, MEMBER_JOIN, etc.
  category       String // MESSAGE, MEMBER, ROLE, CHANNEL, etc.
  description    String
  severity       String  @default("INFO") // DEBUG, INFO, WARN, ERROR, CRITICAL
  defaultChannel String? // Default channel type for this log
  isEnabled      Boolean @default(true)

  // Template configuration
  embedTemplate   Json? // Default embed template
  messageTemplate String? // Default message template
}

// Permission management system
model CommandPermission {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  guildId            String
  commandName        String
  permissionLevel    String // Enum as string
  discordPermissions String[] @default([])
  requiredRoles      String[] @default([])
  allowedUsers       String[] @default([])
  deniedUsers        String[] @default([])
  isConfigurable     Boolean  @default(true)
  createdBy          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([guildId, commandName])
  @@index([guildId])
}

// Maintenance mode
model MaintenanceMode {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  guildId      String   @unique
  isEnabled    Boolean  @default(false)
  allowedUsers String[] @default([])
  reason       String?
  enabledBy    String
  enabledAt    DateTime @default(now())
}

// Permission audit log
model PermissionAuditLog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  guildId     String
  commandName String?
  action      String
  oldValue    Json?
  newValue    Json?
  userId      String
  reason      String?
  timestamp   DateTime @default(now())

  @@index([guildId])
  @@index([timestamp])
}

// Custom roles system for RBAC
model CustomRole {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  guildId     String
  name        String
  permissions String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assignments CustomRoleAssignment[]

  @@unique([guildId, name])
  @@index([guildId])
}

// Custom role assignments
model CustomRoleAssignment {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  guildId    String
  userId     String
  roleId     String     @db.ObjectId
  role       CustomRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedBy String
  assignedAt DateTime   @default(now())
  expiresAt  DateTime?
  isActive   Boolean    @default(true)
  reason     String?

  @@unique([guildId, userId, roleId])
  @@index([guildId, userId])
  @@index([expiresAt])
}

// Reaction Role System
model ReactionRole {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  guildId   String
  channelId String
  messageId String
  emoji     String // Unicode or custom emoji ID
  roleIds   String[] // Multiple roles can be assigned to one reaction
  isActive  Boolean  @default(true)
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs ReactionRoleLog[]

  @@unique([messageId, emoji])
  @@index([guildId])
  @@index([messageId])
}

// Reaction Role Messages (for builder-created embeds)
model ReactionRoleMessage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  guildId     String
  channelId   String
  messageId   String   @unique
  title       String
  description String?
  embedColor  String?
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([guildId])
}

// Reaction Role Activity Logs
model ReactionRoleLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  guildId   String
  userId    String
  messageId String
  emoji     String
  roleId    String
  action    String // ADD or REMOVE
  timestamp DateTime @default(now())

  reactionRole ReactionRole @relation(fields: [messageId, emoji], references: [messageId, emoji])

  @@index([guildId])
  @@index([userId])
  @@index([messageId])
}

// Poll system
model Poll {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  guildId       String
  channelId     String
  messageId     String    @unique
  title         String
  description   String?
  options       String[]
  votes         Json?
  allowMultiple Boolean   @default(false)
  isActive      Boolean   @default(true)
  createdBy     String
  createdAt     DateTime  @default(now())
  endsAt        DateTime?

  @@index([guildId])
  @@index([isActive])
}

// Giveaway system
model Giveaway {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  guildId       String
  channelId     String
  messageId     String    @unique
  giveawayId    String    @unique // Short ID for users
  hostId        String // User who created the giveaway
  title         String
  description   String?
  prize         String
  winnersCount  Int       @default(1)
  requirements  String? // Text description of requirements
  requiredRoles String[]  @default([]) // Required role IDs
  blockedRoles  String[]  @default([]) // Blocked role IDs  
  minimumLevel  Int? // Minimum user level if applicable
  isActive      Boolean   @default(true)
  hasEnded      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  endsAt        DateTime
  endedAt       DateTime?
  winners       String[]  @default([]) // Winner user IDs
  totalEntries  Int       @default(0)

  // Entry tracking
  entries GiveawayEntry[]

  @@index([guildId, isActive])
  @@index([endsAt, isActive])
  @@index([guildId, hostId])
}

model GiveawayEntry {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  giveawayId String   @db.ObjectId
  giveaway   Giveaway @relation(fields: [giveawayId], references: [id], onDelete: Cascade)
  userId     String
  guildId    String
  enteredAt  DateTime @default(now())

  @@unique([giveawayId, userId])
  @@index([giveawayId])
  @@index([userId])
}

// Webhook system
model Webhook {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  guildId    String
  name       String
  url        String
  secret     String?
  isActive   Boolean   @default(true)
  events     String[]  @default([]) // Which events to send
  headers    Json? // Custom headers
  timeout    Int       @default(5000) // Timeout in ms
  retryCount Int       @default(3)
  retryDelay Int       @default(1000) // Base delay in ms
  lastUsed   DateTime?
  failCount  Int       @default(0)
  createdBy  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  logs       WebhookLog[]
  deliveries WebhookDelivery[]

  @@unique([guildId, name])
  @@index([guildId, isActive])
}

model WebhookLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  webhookId String   @db.ObjectId
  webhook   Webhook  @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  guildId   String
  event     String
  payload   Json
  response  Json?
  status    String // SUCCESS, FAILED, TIMEOUT
  httpCode  Int?
  error     String?
  duration  Int? // Response time in ms
  timestamp DateTime @default(now())

  @@index([webhookId, timestamp])
  @@index([guildId, event])
  @@index([status])
}

model WebhookDelivery {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  webhookId   String    @db.ObjectId
  webhook     Webhook   @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  guildId     String
  event       String
  payload     Json
  status      String    @default("PENDING") // PENDING, SUCCESS, FAILED, ABANDONED
  attempts    Int       @default(0)
  maxAttempts Int       @default(3)
  nextRetry   DateTime?
  lastError   String?
  httpCode    Int?
  response    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([webhookId, status])
  @@index([nextRetry])
  @@index([guildId, event])
}

// Starboard system
model StarboardSettings {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  guildId         String
  channelId       String?
  emoji           String   @default("⭐")
  threshold       Int      @default(3)
  selfStar        Boolean  @default(false)
  allowNsfw       Boolean  @default(false)
  ignoredChannels String[] @default([])
  ignoredRoles    String[] @default([])
  ignoredUsers    String[] @default([])
  color           String   @default("#FFD700")
  isEnabled       Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([guildId])
}

model StarboardMessage {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  guildId            String
  channelId          String // Original channel
  messageId          String   @unique // Original message
  starboardChannelId String // Starboard channel
  starboardMessageId String?  @unique // Message in starboard
  authorId           String // Original author
  content            String?
  attachments        String[] @default([])
  embeds             Json[]   @default([])
  starCount          Int      @default(0)
  lastUpdated        DateTime @default(now())
  createdAt          DateTime @default(now())

  reactions StarboardReaction[]

  @@index([guildId, starCount])
}

model StarboardReaction {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  messageId String           @db.ObjectId
  message   StarboardMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  guildId   String
  emoji     String
  addedAt   DateTime         @default(now())

  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
}

// Reminder system
model Reminder {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  guildId      String
  userId       String
  channelId    String
  content      String
  reminderTime DateTime
  isRecurring  Boolean   @default(false)
  recurring    Json? // Cron pattern or interval data
  isActive     Boolean   @default(true)
  isExecuted   Boolean   @default(false)
  executedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  logs ReminderLog[]

  @@index([guildId, userId])
  @@index([reminderTime, isActive])
  @@index([isExecuted, isActive])
}

model ReminderLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  reminderId String   @db.ObjectId
  reminder   Reminder @relation(fields: [reminderId], references: [id], onDelete: Cascade)
  guildId    String
  userId     String
  status     String // SENT, FAILED, CANCELLED
  error      String?
  executedAt DateTime @default(now())

  @@index([reminderId])
  @@index([guildId, userId])
}

// Application system
model ApplicationForm {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  guildId        String
  name           String
  description    String?
  isActive       Boolean  @default(true)
  isMultiStep    Boolean  @default(false)
  maxSubmissions Int? // Per user limit
  fields         Json // Form field definitions
  workflow       Json? // Multi-step workflow definition
  autoRole       String? // Role to assign on approval
  logChannelId   String? // Where to log submissions
  pingRoleId     String? // Role to ping on new submissions
  createdBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  applications Application[]
  steps        ApplicationStep[]

  @@unique([guildId, name])
  @@index([guildId, isActive])
}

model ApplicationStep {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  formId      String          @db.ObjectId
  form        ApplicationForm @relation(fields: [formId], references: [id], onDelete: Cascade)
  stepNumber  Int
  name        String
  description String?
  fields      Json // Step-specific fields
  isRequired  Boolean         @default(true)
  conditions  Json? // Conditional logic

  @@unique([formId, stepNumber])
  @@index([formId])
}

model Application {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  formId      String          @db.ObjectId
  form        ApplicationForm @relation(fields: [formId], references: [id], onDelete: Cascade)
  guildId     String
  userId      String
  status      String          @default("PENDING") // PENDING, APPROVED, REJECTED, IN_REVIEW
  currentStep Int             @default(1)
  responses   Json // All form responses
  reviewerId  String?
  reviewNotes String?
  reviewedAt  DateTime?
  submittedAt DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([formId, userId])
  @@index([guildId, status])
  @@index([userId, status])
}

// Entertainment system (no economy)
model TriviaQuestion {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  guildId       String? // null for global questions
  category      String
  difficulty    String   @default("MEDIUM") // EASY, MEDIUM, HARD
  question      String
  correctAnswer String
  wrongAnswers  String[] // Array of incorrect options
  explanation   String?
  isActive      Boolean  @default(true)
  timesUsed     Int      @default(0)
  correctCount  Int      @default(0)
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([guildId, category])
  @@index([difficulty, isActive])
}

model GameSession {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  guildId      String
  channelId    String
  gameType     String // TRIVIA, POLL, HANGMAN, etc.
  status       String    @default("ACTIVE") // ACTIVE, COMPLETED, CANCELLED
  hostId       String
  participants String[]  @default([])
  gameData     Json // Game-specific data
  scores       Json? // Player scores
  settings     Json? // Game settings
  messageId    String? // Game message ID
  startedAt    DateTime  @default(now())
  endedAt      DateTime?
  duration     Int? // Session duration in seconds

  @@index([guildId, gameType])
  @@index([status, startedAt])
  @@index([hostId])
}

// --------------------------------------------------
// Level history (tracks each time a user reaches a level)
model LevelHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  guildId   String
  userId    String
  level     Int
  reachedAt DateTime @default(now())

  @@index([guildId, userId])
}

// --------------------------------------------------
// Token blacklist for logout / revocation
model TokenBlacklist {
  jti       String   @id @map("_id")
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
}

// --------------------------------------------------
// Game settings (entertainment / economy)
model GameSettings {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  guildId         String   @unique
  enabled         Boolean  @default(true)
  allowedChannels String[] @default([])
  triviaEnabled   Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// --------------------------------------------------
// Music feature settings
model MusicSettings {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  guildId          String   @unique
  enabled          Boolean  @default(true)
  djRoleId         String?
  maxQueueSize     Int      @default(100)
  maxTrackDuration Int      @default(600000)
  allowNSFW        Boolean  @default(false)
  defaultVolume    Int      @default(50)
  autoLeave        Boolean  @default(true)
  autoLeaveDelay   Int      @default(300000)
  allowedChannels  String[] @default([])
  blockedChannels  String[] @default([])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// --------------------------------------------------
// Level reward model
model LevelReward {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  guildId          String
  level            Int
  roleId           String
  removeOnDemotion Boolean @default(false)
}

model User {
  id             String   @id @map("_id") @db.ObjectId
  discordId      String   @unique
  username       String
  discriminator  String
  avatar         String?
  email          String?  @unique
  accessToken    String
  refreshToken   String
  tokenExpiresAt DateTime
  lastLogin      DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

/// Table storing user-submitted message reports
model UserReport {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  guildId      String
  reporterId   String
  reportedUser String
  messageId    String
  channelId    String
  link         String
  reason       String
  status       String    @default("OPEN")
  createdAt    DateTime  @default(now())
  resolvedAt   DateTime?
  resolvedBy   String?
  resolution   String?

  @@index([guildId, status])
}
